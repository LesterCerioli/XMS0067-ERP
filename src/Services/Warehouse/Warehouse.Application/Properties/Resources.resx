<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IssueSlipItem_EntitiesNotFoundException" xml:space="preserve">
    <value>Unable to find entities for IssueSlip.Item(IssueSlipId={0}, WareId={1})!</value>
  </data>
  <data name="IssueSlipItem_EntityNotFoundException" xml:space="preserve">
    <value>IssueSlip.Item(IssueSlipId={0}, PositionId={1}, WareId={2}) not found!</value>
  </data>
  <data name="IssueSlipItem_FullyAssignedException" xml:space="preserve">
    <value>IssueSlip.Item(IssueSlipId={0}, WareId={1}) has been fully assigned!</value>
  </data>
  <data name="IssueSlipItem_PositionAlreadyAssignedException" xml:space="preserve">
    <value>IssueSlip.Item(IssueSlipId={0}, WareId={2}) is already assigned to Position(Id={1})!</value>
  </data>
  <data name="IssueSlipItem_PositionAvailableUnitsException" xml:space="preserve">
    <value>Cannot issue units for IssueSlip.Item(IssueSlipId={0}, PositionId={1}, WareId={2}). Position doesn't hold enough units!</value>
  </data>
  <data name="IssueSlipItem_PositionWareConflictException" xml:space="preserve">
    <value>IssueSlip.Item(IssueSlipId={0}, WareId={2}) cannot be assigned to Position(Id={1})! Position holds a different Ware!</value>
  </data>
  <data name="IssueSlipItem_RequestedUnitsExceededException" xml:space="preserve">
    <value>Cannot issue units for IssueSlip.Item(IssueSlipId={0}, PositionId={1}, WareId={2}). Requested units exceeded!</value>
  </data>
  <data name="IssueSlip_Delete_EntityNotFoundException" xml:space="preserve">
    <value>Unable to delete IssueSlip(Id={0}). IssueSlip not found!</value>
  </data>
  <data name="IssueSlip_EntityNotFoundException" xml:space="preserve">
    <value>IssueSlip(Id={0}) not found!</value>
  </data>
  <data name="IssueSlip_Update_EntityNotFoundException" xml:space="preserve">
    <value>Unable to update IssueSlip(Id={0}). IssueSlip not found!</value>
  </data>
  <data name="Movement_Create_PositionEmptyException" xml:space="preserve">
    <value>Unable to create Movement to retrieve Ware with Id={1} at Position with Id={2}. Position doesn't hold enough units!</value>
  </data>
  <data name="Movement_Create_PositionLoadCapacityException" xml:space="preserve">
    <value>Unable to store Ware ({0}) at Position ({1}) in amount of {2} units. Load capacity exceeded.</value>
  </data>
  <data name="Movement_Create_PositionSpaceCapacityException" xml:space="preserve">
    <value>Unable to store Ware ({0}) at Position ({1}) in amount of {2} units. Space capacity exceeded.</value>
  </data>
  <data name="Movement_Create_PositionWareConflictException" xml:space="preserve">
    <value>Unable to create Movement to {0} Ware with Id={1} at Position with Id={2}. Position contains another Ware with Id={3}!</value>
  </data>
  <data name="Movement_Delete_EntityNotFoundException" xml:space="preserve">
    <value>Unable to delete Movement(Id={0}). Movement not found!</value>
  </data>
  <data name="Position_Delete_EntityNotFoundException" xml:space="preserve">
    <value>Unable to delete Position(Id={0}). Position not found!</value>
  </data>
  <data name="Position_EntityDeleteException" xml:space="preserve">
    <value>Unable to delete Position(Id={0}). Position is not empty!</value>
  </data>
  <data name="Position_EntityNotFoundException" xml:space="preserve">
    <value>Position(Id={0}) not found!</value>
  </data>
  <data name="Position_Update_EntityNotFoundException" xml:space="preserve">
    <value>Unable to update Position(Id={0}). Position not found!</value>
  </data>
  <data name="ReceiptItem_Create_WarehouseFullException" xml:space="preserve">
    <value>Unable to process Receipt.Item(ReceiptId={0}, WareId={1}). Warehouse is full!</value>
  </data>
  <data name="ReceiptItem_Create_Ware_EntityNotFoundException" xml:space="preserve">
    <value>Unable to create Receipt.Item(Ware(ProductId={0}), Units={1}). Ware not found!</value>
  </data>
  <data name="ReceiptItem_EntitiesNotFoundException" xml:space="preserve">
    <value>Unable to find entities of Receipt.Item(ReceiptId={0}, WareId={1})!</value>
  </data>
  <data name="ReceiptItem_EntityNotFoundException" xml:space="preserve">
    <value>Receipt.Item(ReceiptId={0}, PositionId={1}, WareId={2}) not found!</value>
  </data>
  <data name="ReceiptItem_FullyAssignedException" xml:space="preserve">
    <value>Receipt.Item(ReceiptId={0}, WareId={1}) has been fully assigned!</value>
  </data>
  <data name="ReceiptItem_OrderedUnitsExceededException" xml:space="preserve">
    <value>Unable to store units for Receipt.Item(ReceiptId={0}, PositionId={1}, WareId={2}). Ordered units exceeded!</value>
  </data>
  <data name="ReceiptItem_PositionAlreadyAssignedException" xml:space="preserve">
    <value>Receipt.Item(ReceiptId={0}, WareId={2}) is already assigned to Position(Id={1})!</value>
  </data>
  <data name="ReceiptItem_PositionWareConflictException" xml:space="preserve">
    <value>Receipt.Item(ReceiptId={0}, WareId={2}) cannot be assigned to Position(Id={1})! Position holds a different Ware!</value>
  </data>
  <data name="ReceiptItem_Update_EntityNotFoundException" xml:space="preserve">
    <value>Unable to update Receipt.Item(ReceiptId={0}, WareId={1}). Receipt.Item not found!</value>
  </data>
  <data name="Receipt_Delete_EntityNotFoundException" xml:space="preserve">
    <value>Unable to delete Receipt(Id={0}). Receipt not found!</value>
  </data>
  <data name="Receipt_EntityNotFoundException" xml:space="preserve">
    <value>Receipt(Id={0}) not found!</value>
  </data>
  <data name="Receipt_Update_EntityNotFoundException" xml:space="preserve">
    <value>Unable to update Receipt(Id={0}). Receipt not found!</value>
  </data>
  <data name="Relocation_PositionEmptyException" xml:space="preserve">
    <value>Unable to relocate Wares from Position(Id={0}). Position is empty!</value>
  </data>
  <data name="Relocation_PositionLoadCapacityException" xml:space="preserve">
    <value>Unable to relocate Wares from Position(Id={0}) to Position(Id={1}). Load capacity exceeded!</value>
  </data>
  <data name="Relocation_PositionWareConflictException" xml:space="preserve">
    <value>Unable to relocate Wares from Position(Id={0}) to Position(Id={1}). Positions store different Wares.</value>
  </data>
  <data name="Section_Delete_EntityNotFoundException" xml:space="preserve">
    <value>Unable to delete Section(Id={0}). Section not found!</value>
  </data>
  <data name="Section_EntityNotFoundException" xml:space="preserve">
    <value>Section(Id={0}) not found!</value>
  </data>
  <data name="Section_Update_EntityNotFoundException" xml:space="preserve">
    <value>Unable to update Section(Id={0}). Section not found!</value>
  </data>
  <data name="StockTakingItem_EntityNotFoundException" xml:space="preserve">
    <value>StockTaking.Item(StockTakingId={0}, PositionId={1}) not found!</value>
  </data>
  <data name="StockTaking_EntityNotFoundException" xml:space="preserve">
    <value>StockTaking(Id={0}) not found!</value>
  </data>
  <data name="Warehouse_Delete_EntityNotFoundException" xml:space="preserve">
    <value>Unable to delete Warehouse(Id={0}). Warehouse not found!</value>
  </data>
  <data name="Warehouse_EntityNotFoundException" xml:space="preserve">
    <value>Warehouse(Id={0}) not found!</value>
  </data>
  <data name="Warehouse_Update_EntityNotFoundException" xml:space="preserve">
    <value>Unable to update Warehouse(Id={0}). Warehouse not found!</value>
  </data>
  <data name="Ware_Delete_EntityNotFoundException" xml:space="preserve">
    <value>Unable to delete Ware(Id={0}). Ware not found!</value>
  </data>
  <data name="Ware_EntityAlreadyExitsException" xml:space="preserve">
    <value>Unable to create Ware(ProductId={0}). Ware already exists!</value>
  </data>
  <data name="Ware_EntityNotFoundException" xml:space="preserve">
    <value>Ware(Id={0}) not found!</value>
  </data>
  <data name="Ware_ProductId_EntityNotFoundException" xml:space="preserve">
    <value>Ware(ProductId={0}) not found!</value>
  </data>
  <data name="Ware_Update_EntityNotFoundException" xml:space="preserve">
    <value>Unable to update Ware(Id={0}). Ware not found!</value>
  </data>
  <data name="StockTaking_Name_Section" xml:space="preserve">
    <value>Stock-Taking in Section(Id={0})</value>
  </data>
  <data name="StockTaking_Name_Warehouse" xml:space="preserve">
    <value>Stock-Taking in Warehouse(Id={0})</value>
  </data>
  <data name="Position_EntityMoveToBinException" xml:space="preserve">
    <value>Unable to move Position(Id={0}) to bin!</value>
  </data>
  <data name="Section_EntityMoveToBinException" xml:space="preserve">
    <value>Unable to move Section(Id={0}) to bin!</value>
  </data>
  <data name="Movement_EntityNotFoundException" xml:space="preserve">
    <value>Movement(Id={0}) not found!</value>
  </data>
  <data name="ReceiptItem_EntityMoveToBinException" xml:space="preserve">
    <value>Unable to move Receipt.Item(ReceiptId={0}, PositionId={1}, WareId={2}) to bin!</value>
  </data>
  <data name="StockTakingItem_EntityMoveToBinException" xml:space="preserve">
    <value>Unable to move StockTakingItem(StockTakingId={0}, PositionId={1}) to bin!</value>
  </data>
  <data name="StockTaking_EntityMoveToBinException" xml:space="preserve">
    <value>Unable to move StockTaking(Id={0}) to bin!</value>
  </data>
  <data name="Warehouse_EntityMoveToBinException" xml:space="preserve">
    <value>Unable to move Warehouse(Id={0}) to bin!</value>
  </data>
  <data name="IssueSlip_EntityMoveToBinException" xml:space="preserve">
    <value>Unable to move IssueSlip(Id={0}) to bin!</value>
  </data>
  <data name="Ware_EntityMoveToBinException" xml:space="preserve">
    <value>Unable to move Ware(Id={0}) to bin!</value>
  </data>
  <data name="IssueSlipItem_EntityMoveToBinException" xml:space="preserve">
    <value>Unable to move IssueSlip.Item(IssueSlipId={0}, PositionId={1}, WareId={2}) to bin!</value>
  </data>
</root>